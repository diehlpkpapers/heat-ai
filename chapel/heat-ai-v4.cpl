// Compile with: chpl -o heatEquation heatEquation.chpl
// Run with: ./heatEquation -nl <numLocales> (where <numLocales> is the number of locales)

use BlockDist; // For distributed arrays

config const Nx = 1000; // Number of spatial points
config const Nt = 500; // Number of time steps
config const alpha = 0.01; // Thermal diffusivity
config const dx = 1.0 / (Nx-1); // Spatial step size
config const dt = 0.01; // Time step size
config const L = 1.0; // Length of the rod

// Define the domain and the distributed array
const D = {1..Nx};
const SpaceDomain = D dmapped Block(boundingBox=D);
var u: [SpaceDomain] real; // Temperature at current time step
var u_new: [SpaceDomain] real; // Temperature at next time step

// Initial condition: e.g., u(x, 0) = sin(pi * x / L)
forall i in D {
  u[i] = sin(pi * i * dx / L);
}

// Boundary conditions
u[1] = 0.0;
u[Nx] = 0.0;
u_new[1] = 0.0;
u_new[Nx] = 0.0;

// Time-stepping loop
for t in 1..Nt {
  // Update the temperature distribution in parallel
  forall i in 2..Nx-1 {
    u_new[i] = u[i] + alpha * dt / (dx**2) * (u[i-1] - 2*u[i] + u[i+1]);
  }
  // Swap arrays for the next iteration
  forall i in D {
    u[i] = u_new[i];
  }

  // Re-apply boundary conditions
  u[1] = 0.0;
  u[Nx] = 0.0;
}

// Output or analyze the final temperature distribution in u
writeln("Final temperature distribution:");
writeln(u);
